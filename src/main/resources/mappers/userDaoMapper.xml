<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.jaehoon.springboottemplate.repository.dao.UserDAO">

    <!-- approvalRequestResultMap: User 모델(DTO)의 approvalRequest 필드 매핑용 -->
    <resultMap id="approvalRequestResultMap" type="kr.co.jaehoon.springboottemplate.dto.ApprovalRequestDTO">
        <id property="requestId" column="request_id"/>
        <result property="userId" column="user_id"/>
        <result property="reqMessage" column="req_message"/>
        <result property="assignedAdminId" column="assigned_admin_id"/>
        <result property="assignedAdminName" column="assigned_admin_name"/><!-- 조인으로 채움 -->
        <result property="isApproved" column="is_approved"/>
        <result property="requestedAt" column="requested_at"/>
        <result property="approvedAt" column="approved_at"/>
    </resultMap>

    <!-- userResultMap: User 모델(DTO)의 기본 필드 매핑용 -->
    <resultMap id="userResultMap" type="kr.co.jaehoon.springboottemplate.dto.UserDTO">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="displayname" column="displayname"/>
        <result property="profilePicturePath" column="profile_picture_path"/>
        <result property="email" column="email"/>
        <result property="roleId" column="role_id"/>
        <result property="activeSessionJti" column="active_session_jti"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="rolename" column="rolename"/><!-- 조인으로 채움 -->
        <!-- 승인 요청 정보를 User 모델(DTO)에 포함 -->
        <association property="approvalRequest" resultMap="approvalRequestResultMap" columnPrefix="ar_"/>
    </resultMap>

    <select id="findByUsername" parameterType="String" resultMap="userResultMap">
        SELECT
            u.id, u.username, u.password, u.displayname, u.profile_picture_path, u.email, u.role_id, u.active_session_jti, u.is_deleted, u.created_at, u.updated_at,
            r.rolename,
            ar.request_id AS ar_request_id, ar.user_id AS ar_user_id, ar.req_message AS ar_req_message, ar.assigned_admin_id AS ar_assigned_admin_id, uu.displayname AS ar_assigned_admin_name, ar.is_approved AS ar_is_approved,
            ar.requested_at AS ar_requested_at, ar.approved_at AS ar_approved_at
        FROM users u
        JOIN roles r ON u.role_id = r.id
        LEFT JOIN approval_requests ar ON u.id = ar.user_id
        LEFT JOIN users uu ON ar.assigned_admin_id = uu.id
        WHERE u.username = #{username}
    </select>

    <select id="findByDisplayname" parameterType="String" resultMap="userResultMap">
        SELECT
            u.id, u.username, u.password, u.displayname, u.profile_picture_path, u.email, u.role_id, u.active_session_jti, u.is_deleted, u.created_at, u.updated_at,
            r.rolename,
            ar.request_id AS ar_request_id, ar.user_id AS ar_user_id, ar.req_message AS ar_req_message, ar.assigned_admin_id AS ar_assigned_admin_id, uu.displayname AS ar_assigned_admin_name, ar.is_approved AS ar_is_approved,
            ar.requested_at AS ar_requested_at, ar.approved_at AS ar_approved_at
        FROM users u
        JOIN roles r ON u.role_id = r.id
        LEFT JOIN approval_requests ar ON u.id = ar.user_id
        LEFT JOIN users uu ON ar.assigned_admin_id = uu.id
        WHERE u.displayname = #{displayname}
    </select>

    <!-- 사용자 정보를 조회 (업데이트 시 현재 정보를 불러오기 위한 용도) -->
    <select id="findUserById" parameterType="long" resultMap="userResultMap">
        SELECT
            u.id, u.username, u.password, u.displayname, u.profile_picture_path, u.email, u.role_id, u.active_session_jti, u.is_deleted, u.created_at, u.updated_at,
            r.rolename,
            ar.request_id AS ar_request_id, ar.user_id AS ar_user_id, ar.req_message AS ar_req_message, ar.assigned_admin_id AS ar_assigned_admin_id, uu.displayname AS ar_assigned_admin_name, ar.is_approved AS ar_is_approved,
            ar.requested_at AS ar_requested_at, ar.approved_at AS ar_approved_at
        FROM users u
        JOIN roles r ON u.role_id = r.id
        LEFT JOIN approval_requests ar ON u.id = ar.user_id
        LEFT JOIN users uu ON ar.assigned_admin_id = uu.id
        WHERE u.id = #{id}
    </select>

    <!-- displayname과 email로 특정 사용자를 조회 -->
    <select id="findUserByDisplaynameAndEmail" parameterType="map" resultMap="userResultMap">
        SELECT
            u.id, u.username, u.password, u.displayname, u.profile_picture_path, u.email, u.role_id, u.active_session_jti, u.is_deleted, u.created_at, u.updated_at,
            r.rolename
        FROM users u
        JOIN roles r ON u.role_id = r.id
        WHERE u.displayname = #{displayname} AND u.email = #{email} AND u.is_deleted = 0
    </select>

    <!-- 권한(역할) 이름(rolename)을 통해 role_id를 조회 -->
    <select id="findRoleIdByRolename" parameterType="String" resultType="long">
        SELECT id
        FROM roles
        WHERE rolename = #{rolename}
    </select>

    <!-- displayname을 기준으로 담당 관리자(ADMIN)의 user_id를 조회 -->
    <select id="findAdminIdByDisplayname" parameterType="String" resultType="long">
        SELECT u.id
        FROM users u
        JOIN roles r ON u.role_id = r.id
        WHERE u.displayname = #{adminname} AND r.rolename = 'ADMIN' AND u.id IN (SELECT user_id FROM approval_requests WHERE is_approved = 1)
        LIMIT 1
    </select>

    <!-- ADMIN 권한을 가진 사용자들의 displayname 목록을 조회 -->
    <select id="findAdminNames" resultType="String">
        SELECT u.displayname
        FROM users u
        JOIN roles r ON u.role_id = r.id
        WHERE r.rolename = 'ADMIN' AND u.id IN (SELECT user_id FROM approval_requests WHERE is_approved = 1)
        ORDER BY u.displayname
    </select>

    <!-- 특정 이름(displayname)의 ADMIN 권한 사용자가 존재하는지 확인 -->
    <select id="countAdminByDisplayname" parameterType="String" resultType="int">
        SELECT COUNT(u.id)
        FROM users u
        JOIN roles r ON u.role_id = r.id
        WHERE u.displayname = #{adminname} AND r.rolename = 'ADMIN' AND u.id IN (SELECT user_id FROM approval_requests WHERE is_approved = 1)
    </select>

    <!-- 승인 대기 중인 ADMIN 계정의 목록을 조회 (SYSTEM 페이지용) -->
<!--    <select id="findPendingAdmins" resultType="map">-->
    <select id="findPendingAdmins" resultType="kr.co.jaehoon.springboottemplate.dto.LoginApprovalDTO">
        SELECT
            u.id, u.username, u.displayname, u.email, ar.req_message,
            r.rolename
        FROM users u
        JOIN roles r ON u.role_id = r.id
        JOIN approval_requests ar ON u.id = ar.user_id
        WHERE r.rolename = 'ADMIN' AND ar.is_approved = 0
        ORDER BY u.id ASC
    </select>

    <!-- 특정 관리자가 담당하는 승인 대기 중인 USER 계정의 목록을 조회 (ADMIN 페이지용) -->
    <select id="findPendingUsersByAdminName" parameterType="long" resultType="kr.co.jaehoon.springboottemplate.dto.LoginApprovalDTO">
        SELECT
            u.id, u.username, u.displayname, u.email, ar.req_message,
            r.rolename, ar.assigned_admin_id AS ar_assigned_admin_id, uu.displayname AS ar_assigned_admin_name
        FROM users u
        JOIN roles r ON u.role_id = r.id
        JOIN approval_requests ar ON u.id = ar.user_id
        JOIN users uu ON ar.assigned_admin_id = uu.id
        WHERE r.rolename = 'USER' AND ar.is_approved = 0 AND ar.assigned_admin_id = #{adminId}
        ORDER BY u.id ASC
    </select>

</mapper>
